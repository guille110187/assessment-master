{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\assessment\\\\src\\\\register.js\";\nimport React from \"react\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport AuthApi from './AuthApi';\nimport Cookies from 'js-cookie';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as EmailValidator from \"email-validator\";\nimport * as Yup from \"yup\";\nimport \"./style.scss\";\n\nclass Register extends React.Component {\n  render() {\n    const {\n      history\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        fullName: '',\n        email: '',\n        password: ''\n      },\n      validationSchema: Yup.object().shape({\n        fullName: Yup.string().required('First Name is required'),\n        email: Yup.string().email('Email is invalid').required('Email is required'),\n        password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required')\n      }),\n      onSubmit: fields => {\n        alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4));\n        history.push('/home');\n      },\n      render: ({\n        errors,\n        status,\n        touched\n      }) => /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"fullName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 15\n        }\n      }, \"Full Name\"), /*#__PURE__*/React.createElement(Field, {\n        name: \"fullName\",\n        type: \"text\",\n        className: 'form-control' + (errors.fullName && touched.fullName ? ' is-invalid' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(ErrorMessage, {\n        name: \"fullName\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 15\n        }\n      }, \"Email\"), /*#__PURE__*/React.createElement(Field, {\n        name: \"email\",\n        type: \"text\",\n        className: 'form-control' + (errors.email && touched.email ? ' is-invalid' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(ErrorMessage, {\n        name: \"email\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }\n      }, \"Password\"), /*#__PURE__*/React.createElement(Field, {\n        name: \"password\",\n        type: \"password\",\n        className: 'form-control' + (errors.password && touched.password ? ' is-invalid' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 15\n        }\n      }), /*#__PURE__*/React.createElement(ErrorMessage, {\n        name: \"password\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary mr-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 15\n        }\n      }, \"Register\"), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"reset\",\n        className: \"btn btn-secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }\n      }, \"Reset\"))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nexport default Register;","map":{"version":3,"sources":["C:/React/assessment/src/register.js"],"names":["React","Link","Redirect","AuthApi","Cookies","Formik","Field","Form","ErrorMessage","EmailValidator","Yup","Register","Component","render","history","props","fullName","email","password","object","shape","string","required","min","fields","alert","JSON","stringify","push","errors","status","touched"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport AuthApi from './AuthApi';\r\nimport Cookies from 'js-cookie';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as EmailValidator from \"email-validator\";\r\nimport * as Yup from \"yup\";\r\nimport \"./style.scss\";\r\n\r\n\r\nclass Register extends React.Component {\r\n  render() {\r\n    const { history } = this.props;\r\n    return (\r\n      <Formik\r\n        initialValues={{\r\n          fullName: '',\r\n          email: '',\r\n          password: ''\r\n        }}\r\n        validationSchema={Yup.object().shape({\r\n          fullName: Yup.string()\r\n            .required('First Name is required'),\r\n          email: Yup.string()\r\n            .email('Email is invalid')\r\n            .required('Email is required'),\r\n          password: Yup.string()\r\n            .min(6, 'Password must be at least 6 characters')\r\n            .required('Password is required')\r\n\r\n        })}\r\n        onSubmit={fields => {\r\n          alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4));\r\n          history.push('/home');\r\n        }}\r\n        render={({ errors, status, touched }) => (\r\n          <Form>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"fullName\">Full Name</label>\r\n              <Field name=\"fullName\" type=\"text\" className={'form-control' + (errors.fullName && touched.fullName ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"fullName\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"password\">Password</label>\r\n              <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n              <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\r\n              <button type=\"reset\" className=\"btn btn-secondary\">Reset</button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default Register;\r\n"]},"metadata":{},"sourceType":"module"}