{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\assessment\\\\src\\\\login.js\";\nimport React from \"react\";\nimport { Formik } from \"formik\";\nimport * as EmailValidator from \"email-validator\";\nimport * as Yup from \"yup\";\n\nconst ValidatedLoginForm = () => /*#__PURE__*/React.createElement(Formik, {\n  initialValues: {\n    email: \"\",\n    password: \"\"\n  },\n  onSubmit: (values, {\n    setSubmitting\n  }) => {\n    setTimeout(() => {\n      console.log(\"Logging in\", values);\n      setSubmitting(false);\n    }, 500);\n  } //********Handling validation messages yourself*******/\n  // validate={values => {\n  //   let errors = {};\n  //   if (!values.email) {\n  //     errors.email = \"Required\";\n  //   } else if (!EmailValidator.validate(values.email)) {\n  //     errors.email = \"Invalid email address\";\n  //   }\n  //   const passwordRegex = /(?=.*[0-9])/;\n  //   if (!values.password) {\n  //     errors.password = \"Required\";\n  //   } else if (values.password.length < 8) {\n  //     errors.password = \"Password must be 8 characters long.\";\n  //   } else if (!passwordRegex.test(values.password)) {\n  //     errors.password = \"Invalida password. Must contain one number\";\n  //   }\n  //   return errors;\n  // }}\n  //********Using Yum for validation********/\n  ,\n  validationSchema: Yup.object().shape({\n    email: Yup.string().email().required(\"Required\"),\n    password: Yup.string().required(\"No password provided.\").min(8, \"Password is too short - should be 8 chars minimum.\").matches(/(?=.*[0-9])/, \"Password must contain a number.\")\n  }),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 3\n  }\n}, props => {\n  const {\n    values,\n    touched,\n    errors,\n    isSubmitting,\n    handleChange,\n    handleBlur,\n    handleSubmit\n  } = props;\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"email\",\n    type: \"text\",\n    placeholder: \"Enter your email\",\n    value: values.email,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    className: errors.email && touched.email && \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  }), errors.email && touched.email && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, errors.email), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Enter your password\",\n    value: values.password,\n    onChange: handleChange,\n    onBlur: handleBlur,\n    className: errors.password && touched.password && \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }), errors.password && touched.password && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-feedback\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, errors.password), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, \"Login\"));\n});\n\nexport default ValidatedLoginForm;","map":{"version":3,"sources":["C:/React/assessment/src/login.js"],"names":["React","Formik","EmailValidator","Yup","ValidatedLoginForm","email","password","values","setSubmitting","setTimeout","console","log","object","shape","string","required","min","matches","props","touched","errors","isSubmitting","handleChange","handleBlur","handleSubmit"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Formik } from \"formik\";\r\nimport * as EmailValidator from \"email-validator\";\r\nimport * as Yup from \"yup\";\r\nconst ValidatedLoginForm = () => (\r\n  <Formik\r\n    initialValues={{ email: \"\", password: \"\" }}\r\n    onSubmit={(values, { setSubmitting }) => {\r\n      setTimeout(() => {\r\n        console.log(\"Logging in\", values);\r\n        setSubmitting(false);\r\n      }, 500);\r\n    }}\r\n    //********Handling validation messages yourself*******/\r\n    // validate={values => {\r\n    //   let errors = {};\r\n    //   if (!values.email) {\r\n    //     errors.email = \"Required\";\r\n    //   } else if (!EmailValidator.validate(values.email)) {\r\n    //     errors.email = \"Invalid email address\";\r\n    //   }\r\n\r\n    //   const passwordRegex = /(?=.*[0-9])/;\r\n    //   if (!values.password) {\r\n    //     errors.password = \"Required\";\r\n    //   } else if (values.password.length < 8) {\r\n    //     errors.password = \"Password must be 8 characters long.\";\r\n    //   } else if (!passwordRegex.test(values.password)) {\r\n    //     errors.password = \"Invalida password. Must contain one number\";\r\n    //   }\r\n\r\n    //   return errors;\r\n    // }}\r\n    //********Using Yum for validation********/\r\n\r\n    validationSchema={Yup.object().shape({\r\n      email: Yup.string()\r\n        .email()\r\n        .required(\"Required\"),\r\n      password: Yup.string()\r\n        .required(\"No password provided.\")\r\n        .min(8, \"Password is too short - should be 8 chars minimum.\")\r\n        .matches(/(?=.*[0-9])/, \"Password must contain a number.\")\r\n    })}\r\n  >\r\n    {props => {\r\n      const {\r\n        values,\r\n        touched,\r\n        errors,\r\n        isSubmitting,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit\r\n      } = props;\r\n      return (\r\n        <form onSubmit={handleSubmit}>\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input\r\n            name=\"email\"\r\n            type=\"text\"\r\n            placeholder=\"Enter your email\"\r\n            value={values.email}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            className={errors.email && touched.email && \"error\"}\r\n          />\r\n          {errors.email && touched.email && (\r\n            <div className=\"input-feedback\">{errors.email}</div>\r\n          )}\r\n          <label htmlFor=\"email\">Password</label>\r\n          <input\r\n            name=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"Enter your password\"\r\n            value={values.password}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            className={errors.password && touched.password && \"error\"}\r\n          />\r\n          {errors.password && touched.password && (\r\n            <div className=\"input-feedback\">{errors.password}</div>\r\n          )}\r\n          <button type=\"submit\" disabled={isSubmitting}>\r\n            Login\r\n          </button>\r\n        </form>\r\n      );\r\n    }}\r\n  </Formik>\r\n);\r\n\r\nexport default ValidatedLoginForm;\r\n"]},"metadata":{},"sourceType":"module"}