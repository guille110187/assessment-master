{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\assessment\\\\src\\\\register.js\";\nimport React from 'react';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nexport default class Register extends React.Component {\n  render() {\n    const {\n      history\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Formik, {\n      initialValues: {\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      },\n      validationSchema: Yup.object().shape({\n        firstName: Yup.string().required('First Name is required'),\n        lastName: Yup.string().required('Last Name is required'),\n        email: Yup.string().email('Email is invalid').required('Email is required'),\n        password: Yup.string().min(6, 'Password must be at least 6 characters').required('Password is required'),\n        confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], 'Passwords must match').required('Confirm Password is required')\n      }),\n      onSubmit: fields => {\n        alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4));\n        history.push('/home');\n      },\n      render: ({\n        errors,\n        status,\n        touched\n      }) => /*#__PURE__*/React.createElement(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"firstName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 29\n        }\n      }, \"First Name\"), /*#__PURE__*/React.createElement(Field, {\n        name: \"firstName\",\n        type: \"text\",\n        className: 'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(ErrorMessage, {\n        name: \"firstName\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"lastName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 29\n        }\n      }, \"Last Name\"), /*#__PURE__*/React.createElement(Field, {\n        name: \"lastName\",\n        type: \"text\",\n        className: 'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(ErrorMessage, {\n        name: \"lastName\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }\n      }, \"Email\"), /*#__PURE__*/React.createElement(Field, {\n        name: \"email\",\n        type: \"text\",\n        className: 'form-control' + (errors.email && touched.email ? ' is-invalid' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(ErrorMessage, {\n        name: \"email\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }\n      }, \"Password\"), /*#__PURE__*/React.createElement(Field, {\n        name: \"password\",\n        type: \"password\",\n        className: 'form-control' + (errors.password && touched.password ? ' is-invalid' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(ErrorMessage, {\n        name: \"password\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", {\n        htmlFor: \"confirmPassword\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 29\n        }\n      }, \"Confirm Password\"), /*#__PURE__*/React.createElement(Field, {\n        name: \"confirmPassword\",\n        type: \"password\",\n        className: 'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : ''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }\n      }), /*#__PURE__*/React.createElement(ErrorMessage, {\n        name: \"confirmPassword\",\n        component: \"div\",\n        className: \"invalid-feedback\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 29\n        }\n      })), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"form-group\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary mr-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 29\n        }\n      }, \"Register\"), /*#__PURE__*/React.createElement(\"button\", {\n        type: \"reset\",\n        className: \"btn btn-secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }\n      }, \"Reset\"))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 13\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/React/assessment/src/register.js"],"names":["React","Formik","Field","Form","ErrorMessage","Yup","Register","Component","render","history","props","firstName","lastName","email","password","confirmPassword","object","shape","string","required","min","oneOf","ref","fields","alert","JSON","stringify","push","errors","status","touched"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nexport default class Register extends React.Component {\r\n    render() {\r\n      const {history} = this.props;\r\n        return (\r\n            <Formik\r\n                initialValues={{\r\n                    firstName: '',\r\n                    lastName: '',\r\n                    email: '',\r\n                    password: '',\r\n                    confirmPassword: ''\r\n                }}\r\n                validationSchema={Yup.object().shape({\r\n                    firstName: Yup.string()\r\n                        .required('First Name is required'),\r\n                    lastName: Yup.string()\r\n                        .required('Last Name is required'),\r\n                    email: Yup.string()\r\n                        .email('Email is invalid')\r\n                        .required('Email is required'),\r\n                    password: Yup.string()\r\n                        .min(6, 'Password must be at least 6 characters')\r\n                        .required('Password is required'),\r\n                    confirmPassword:  Yup.string()\r\n                        .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n                        .required('Confirm Password is required')\r\n                })}\r\n                onSubmit={fields => {\r\n                    alert('SUCCESS!! :-)\\n\\n' + JSON.stringify(fields, null, 4));\r\n                    history.push('/home');\r\n                }}\r\n                render={({ errors, status, touched }) => (\r\n                    <Form>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"firstName\">First Name</label>\r\n                            <Field name=\"firstName\" type=\"text\" className={'form-control' + (errors.firstName && touched.firstName ? ' is-invalid' : '')} />\r\n                            <ErrorMessage name=\"firstName\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"lastName\">Last Name</label>\r\n                            <Field name=\"lastName\" type=\"text\" className={'form-control' + (errors.lastName && touched.lastName ? ' is-invalid' : '')} />\r\n                            <ErrorMessage name=\"lastName\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"email\">Email</label>\r\n                            <Field name=\"email\" type=\"text\" className={'form-control' + (errors.email && touched.email ? ' is-invalid' : '')} />\r\n                            <ErrorMessage name=\"email\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <Field name=\"password\" type=\"password\" className={'form-control' + (errors.password && touched.password ? ' is-invalid' : '')} />\r\n                            <ErrorMessage name=\"password\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"confirmPassword\">Confirm Password</label>\r\n                            <Field name=\"confirmPassword\" type=\"password\" className={'form-control' + (errors.confirmPassword && touched.confirmPassword ? ' is-invalid' : '')} />\r\n                            <ErrorMessage name=\"confirmPassword\" component=\"div\" className=\"invalid-feedback\" />\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <button type=\"submit\" className=\"btn btn-primary mr-2\">Register</button>\r\n                            <button type=\"reset\" className=\"btn btn-secondary\">Reset</button>\r\n                        </div>\r\n                    </Form>\r\n                )}\r\n            />\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}