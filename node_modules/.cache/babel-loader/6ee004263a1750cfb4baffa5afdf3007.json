{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\assessment\\\\src\\\\Home.js\";\nimport React from \"react\"; //import Autosuggest from \"react-autosuggest\";\n\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\"; //import axios from \"axios\";\n//import Error from \"./Error\";\n\nconst ValidationSchema = Yup.object().shape({\n  name: Yup.string().min(1, \"Too Short!\").max(255, \"Too Long!\").required(\"Required\"),\n  country: Yup.string().min(1, \"Too Short!\").max(255, \"Too Long!\").required(\"Required\"),\n  email: Yup.string().email(\"Must be an email address\").max(255, \"Too Long!\").required(\"Required\")\n});\n\nfunction isValidPostalCode(postalCode, country) {\n  let postalCodeRegex;\n\n  switch (country) {\n    case \"United States of America\":\n      postalCodeRegex = /^([0-9]{5})(?:[-\\s]*([0-9]{4}))?$/;\n      break;\n\n    case \"Canada\":\n      postalCodeRegex = /^([A-Z][0-9][A-Z])\\s*([0-9][A-Z][0-9])$/;\n      break;\n\n    default:\n      return true;\n  }\n\n  return postalCodeRegex.test(postalCode);\n}\n\nfunction postalCodeLabel(country) {\n  const postalCodeLabels = {\n    \"United States of America\": \"Zip Code\",\n    Canada: \"Postal Code\"\n  };\n  return postalCodeLabels[country] || \"Postal Code\";\n}\n\nfunction showPostalCode(country) {\n  return [\"United States of America\", \"Canada\"].includes(country);\n}\n\nexport default function FormikForm() {\n  const [country, setCountry] = React.useState(\"\");\n  const [suggestions, setSuggestions] = React.useState([]);\n  return /*#__PURE__*/React.createElement(Formik, {\n    initialValues: {\n      name: \"\",\n      email: \"\",\n      country: \"\",\n      postalCode: \"\"\n    },\n    validationSchema: ValidationSchema,\n    validate: values => {\n      let errors = {}; // Validate the Postal Code conditionally based on the chosen Country\n\n      if (!isValidPostalCode(values.postalCode, values.country)) {\n        errors.postalCode = `${postalCodeLabel(values.country)} invalid`;\n      }\n\n      return errors;\n    },\n    onSubmit: (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      setSubmitting(true);\n      setTimeout(() => {\n        alert(JSON.stringify(values, null, 2));\n        resetForm();\n        setCountry(\"\");\n        setSubmitting(false);\n      }, 500);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    errors,\n    touched,\n    handleChange,\n    handleBlur,\n    handleSubmit,\n    isSubmitting,\n    setFieldValue\n  }) => /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, \"A Great Form\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"name\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.name,\n    className: touched.name && errors.name ? \"has-error\" : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Error, {\n    touched: touched.name,\n    message: errors.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"email\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.email,\n    className: touched.email && errors.email ? \"has-error\" : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Error, {\n    touched: touched.email,\n    message: errors.email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"Country\"), /*#__PURE__*/React.createElement(Autosuggest, {\n    suggestions: suggestions,\n    onSuggestionsFetchRequested: async ({\n      value\n    }) => {\n      if (!value) {\n        setSuggestions([]);\n        return;\n      }\n\n      try {\n        const response = await axios.get(`https://restcountries.eu/rest/v2/name/${value}`);\n        setSuggestions(response.data.map(row => ({\n          name: row.name,\n          flag: row.flag\n        })));\n      } catch (e) {\n        setSuggestions([]);\n      }\n    },\n    onSuggestionsClearRequested: () => {\n      setSuggestions([]);\n    },\n    getSuggestionValue: suggestion => suggestion.name,\n    renderSuggestion: suggestion => /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: suggestion.flag,\n      alt: suggestion.name,\n      style: {\n        width: \"25px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 19\n      }\n    }), suggestion.name),\n    onSuggestionSelected: (event, {\n      suggestion,\n      method\n    }) => {\n      if (method === \"enter\") {\n        event.preventDefault();\n      }\n\n      setCountry(suggestion.name);\n      setFieldValue(\"country\", suggestion.name);\n    },\n    inputProps: {\n      placeholder: \"Search for your country\",\n      autoComplete: \"abcd\",\n      value: country,\n      name: \"country\",\n      onChange: (_event, {\n        newValue\n      }) => {\n        setCountry(newValue);\n      },\n      className: touched.country && errors.country ? \"has-error\" : null\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Error, {\n    touched: touched.country,\n    message: errors.country,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  })), showPostalCode(values.country) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 15\n    }\n  }, postalCodeLabel(values.country)), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"postalCode\",\n    onChange: handleChange,\n    onBlur: handleBlur,\n    value: values.postalCode,\n    className: touched.postalCode && errors.postalCode ? \"has-error\" : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Error, {\n    touched: touched.postalCode,\n    message: errors.postalCode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 15\n    }\n  })) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"input-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }, \"Submit\"))));\n}","map":{"version":3,"sources":["C:/React/assessment/src/Home.js"],"names":["React","Formik","Yup","ValidationSchema","object","shape","name","string","min","max","required","country","email","isValidPostalCode","postalCode","postalCodeRegex","test","postalCodeLabel","postalCodeLabels","Canada","showPostalCode","includes","FormikForm","setCountry","useState","suggestions","setSuggestions","values","errors","setSubmitting","resetForm","setTimeout","alert","JSON","stringify","touched","handleChange","handleBlur","handleSubmit","isSubmitting","setFieldValue","value","response","axios","get","data","map","row","flag","e","suggestion","width","event","method","preventDefault","placeholder","autoComplete","onChange","_event","newValue","className"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n//import Autosuggest from \"react-autosuggest\";\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\n//import axios from \"axios\";\r\n//import Error from \"./Error\";\r\n\r\nconst ValidationSchema = Yup.object().shape({\r\n  name: Yup.string()\r\n    .min(1, \"Too Short!\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  country: Yup.string()\r\n    .min(1, \"Too Short!\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\"),\r\n  email: Yup.string()\r\n    .email(\"Must be an email address\")\r\n    .max(255, \"Too Long!\")\r\n    .required(\"Required\")\r\n});\r\n\r\nfunction isValidPostalCode(postalCode, country) {\r\n  let postalCodeRegex;\r\n\r\n  switch (country) {\r\n    case \"United States of America\":\r\n      postalCodeRegex = /^([0-9]{5})(?:[-\\s]*([0-9]{4}))?$/;\r\n      break;\r\n    case \"Canada\":\r\n      postalCodeRegex = /^([A-Z][0-9][A-Z])\\s*([0-9][A-Z][0-9])$/;\r\n      break;\r\n    default:\r\n      return true;\r\n  }\r\n  return postalCodeRegex.test(postalCode);\r\n}\r\n\r\nfunction postalCodeLabel(country) {\r\n  const postalCodeLabels = {\r\n    \"United States of America\": \"Zip Code\",\r\n    Canada: \"Postal Code\"\r\n  };\r\n  return postalCodeLabels[country] || \"Postal Code\";\r\n}\r\n\r\nfunction showPostalCode(country) {\r\n  return [\"United States of America\", \"Canada\"].includes(country);\r\n}\r\n\r\nexport default function FormikForm() {\r\n  const [country, setCountry] = React.useState(\"\");\r\n  const [suggestions, setSuggestions] = React.useState([]);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{\r\n        name: \"\",\r\n        email: \"\",\r\n        country: \"\",\r\n        postalCode: \"\"\r\n      }}\r\n      validationSchema={ValidationSchema}\r\n      validate={values => {\r\n        let errors = {};\r\n\r\n        // Validate the Postal Code conditionally based on the chosen Country\r\n        if (!isValidPostalCode(values.postalCode, values.country)) {\r\n          errors.postalCode = `${postalCodeLabel(values.country)} invalid`;\r\n        }\r\n\r\n        return errors;\r\n      }}\r\n      onSubmit={(values, { setSubmitting, resetForm }) => {\r\n        setSubmitting(true);\r\n\r\n        setTimeout(() => {\r\n          alert(JSON.stringify(values, null, 2));\r\n          resetForm();\r\n          setCountry(\"\");\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n    >\r\n      {({\r\n        values,\r\n        errors,\r\n        touched,\r\n        handleChange,\r\n        handleBlur,\r\n        handleSubmit,\r\n        isSubmitting,\r\n        setFieldValue\r\n      }) => (\r\n        <form onSubmit={handleSubmit}>\r\n          <h2>A Great Form</h2>\r\n\r\n          <div className=\"input-row\">\r\n            <label>Name</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.name}\r\n              className={touched.name && errors.name ? \"has-error\" : null}\r\n            />\r\n            <Error touched={touched.name} message={errors.name} />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <label>Email</label>\r\n            <input\r\n              type=\"text\"\r\n              name=\"email\"\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              value={values.email}\r\n              className={touched.email && errors.email ? \"has-error\" : null}\r\n            />\r\n            <Error touched={touched.email} message={errors.email} />\r\n          </div>\r\n\r\n          <div className=\"input-row\">\r\n            <label>Country</label>\r\n            <Autosuggest\r\n              suggestions={suggestions}\r\n              onSuggestionsFetchRequested={async ({ value }) => {\r\n                if (!value) {\r\n                  setSuggestions([]);\r\n                  return;\r\n                }\r\n\r\n                try {\r\n                  const response = await axios.get(\r\n                    `https://restcountries.eu/rest/v2/name/${value}`\r\n                  );\r\n\r\n                  setSuggestions(\r\n                    response.data.map(row => ({\r\n                      name: row.name,\r\n                      flag: row.flag\r\n                    }))\r\n                  );\r\n                } catch (e) {\r\n                  setSuggestions([]);\r\n                }\r\n              }}\r\n              onSuggestionsClearRequested={() => {\r\n                setSuggestions([]);\r\n              }}\r\n              getSuggestionValue={suggestion => suggestion.name}\r\n              renderSuggestion={suggestion => (\r\n                <div>\r\n                  <img\r\n                    src={suggestion.flag}\r\n                    alt={suggestion.name}\r\n                    style={{ width: \"25px\" }}\r\n                  />\r\n                  {suggestion.name}\r\n                </div>\r\n              )}\r\n              onSuggestionSelected={(event, { suggestion, method }) => {\r\n                if (method === \"enter\") {\r\n                  event.preventDefault();\r\n                }\r\n                setCountry(suggestion.name);\r\n                setFieldValue(\"country\", suggestion.name);\r\n              }}\r\n              inputProps={{\r\n                placeholder: \"Search for your country\",\r\n                autoComplete: \"abcd\",\r\n                value: country,\r\n                name: \"country\",\r\n                onChange: (_event, { newValue }) => {\r\n                  setCountry(newValue);\r\n                },\r\n                className:\r\n                  touched.country && errors.country ? \"has-error\" : null\r\n              }}\r\n            />\r\n            <Error touched={touched.country} message={errors.country} />\r\n          </div>\r\n\r\n          {showPostalCode(values.country) ? (\r\n            <div className=\"input-row\">\r\n              <label>{postalCodeLabel(values.country)}</label>\r\n              <input\r\n                type=\"text\"\r\n                name=\"postalCode\"\r\n                onChange={handleChange}\r\n                onBlur={handleBlur}\r\n                value={values.postalCode}\r\n                className={\r\n                  touched.postalCode && errors.postalCode ? \"has-error\" : null\r\n                }\r\n              />\r\n              <Error touched={touched.postalCode} message={errors.postalCode} />\r\n            </div>\r\n          ) : null}\r\n\r\n          <div className=\"input-row\">\r\n            <button type=\"submit\" disabled={isSubmitting}>\r\n              Submit\r\n            </button>\r\n          </div>\r\n        </form>\r\n      )}\r\n    </Formik>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}